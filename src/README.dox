/**

@mainpage Algorytm podejmowania decyzji przez bota w grze

@author Bartłomiej Olber

W zamyśle bot składa się z 4 modułów:
 - moduł zarządzający całością pracy bota
 - moduł parsujący "ekran", czyli przetwarzający aktualny stan rozgrywki do typów danych, które można poddać działaniu algorytmu
 - moduł właściwego algorytmu, który otrzymuje dane o stanie rozgrywki i podejmuje decyzje o działaniach bota
 - moduł egzekwujący decyzje wydane przez poprzedni moduł

Ostatnie 3 moduły komunikują się jedynie z pierwszym modułem kontrolującym.
Moim zadaniem było zaimplementowanie trzeciego modułu. Potrzebne do tego było jeszcze zdefiniowanie zestawu klas obiektów gry,
którymi algorytm może się posługiwać.
Potrzebne również było zaimitowanie modułu drugiego, by dostarczyć do algorytmu danych testowych. Losowe wygenerowanie sensownych
danych nie było całkowicie trywialne, więc klasa "parsera ekranu" posiada też kilkanaście składowych. Implementacja modułu
kontrolującego i modułu wykonującego decyzje nie była konieczna.
Komponenty bota oraz jego diagram komunikacji pomiędzy modułami znajduje się na poniższych grafikach.
 
<b>Komponenty bota</b>

@image html bot_components.png

<b>Diagram komunikacji</b>

@image html sequence_diagram.png


<b>Algorytm podejmowania decyzji</b>

Najpierw podejmowane są decyzje o działaniu bohatera, następnie zamku

@image html hero_actions.png

@image html castle_actions.png

Dalsza rozbudowa programu na przykład dopisanie modułu pobierania stanu gry z ekranu nie wymagałaby zmiany interfejsu modułu
algorytmu; struktura GameState przechowuje informacje o wszystkich obiektach gry, więc nie byłaby konieczna jej modyfikacja.
Dopisanie modułu wykonawcy decyzji również; decyzje są rozróżnialne, bo do kontenera ActionScenario dodawane są wskaźniki 
na różne klasy pochodne klasy Action i każda przechowuje w sobie informację o obiekcie, na którym wykonana ma być akcja.
Napisanie interfejsu graficznego mogłoby polegać na wyświetleniu siatki planszy i zaznaczenie na niej istniejących obiektów gry 
wraz z możliwością ich modyfikacji (przy użyciu zwykłych setterów). Akcje bohatera mogłyby być na tej siatce zaznaczane i w ten
sposób użytkownik widziałby jakie decyzje podjął algorytm.

*/
